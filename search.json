[{"title":"Why blog?","url":"/2021/10/21/Create-First-Post/","content":"Why Do I Need the BlogHaving my personal blog is always on my to-do-list but with lower priority. As the time of graduating approaching, I realized it is the best time to do it now, as I should get prepared of my previous work and project collection for job application, so why not? Not to mention I could share my learning progress, technics, results and mistakes I made with much more people here. \nHexo and Github PagesI do not want to spend too much time choosing the technology or service to use and building the site. So finally hexo and github pages seem to be a solution\nWhat is Hexo\nHexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds .\n\nBuild Local Static Website FirstHere, we first need to build a local static website before we make it public and accessible to Internet. Type commands below in Command Line\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install \nhexo server\n\nWith this, the server is host on our localhost with port 4000. Open http://localhost:4000/ to check it.\nCommandTo add a page or post, the layout could be page, post and title looks like &quot;My new post&quot;.\nhexo new [layout] &lt;title&gt;\n\nDeploy Website on Github PagesFirst, create a new repo with name &lt;github-username&gt;.github.io.\nThen install the plugin `hexo-deployer-git by\nnpm install hexo-deployer-git --save\n\nand then change the configuration by opening blog/_config.yml and add following code:\ndeploy:\n    type: git\n    repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;github-username&gt;&#x2F;&lt;github-username&gt;.github.io.git\n    branch: &lt;branch you want to deploy&gt;\n\nAfter finishing steps above, run following commands to generate static files and deploy them to the github pages:\nhexo generate\nhexo deploy\n\nCongratulationNow open https://&lt;github-username&gt;.github.io and you should see your own blog!\nExtentedHow to embed a PDF in the pageAdobe offers a embed API to make your PDF embedded in a HTML page.\nFirst, log in and create a credential to use, specify the domain as the link of your blog, for me douliu95.github.io.\nThen check a demo, there are four kinds of embed mode to choose:\n\nfull window\nsized container\nin-line\nlightbox\n\nI use in-line mode since I want to embed my cv, which is only one page long. Then, click generate code and get a sample code:\n&lt;div id=\"adobe-dc-view\">&lt;/div>\n&lt;script src=\"https://documentcloud.adobe.com/view-sdk/main.js\">&lt;/script>\n&lt;script type=\"text/javascript\">\n\tdocument.addEventListener(\"adobe_dc_view_sdk.ready\", function()&#123; \n\t\tvar adobeDCView = new AdobeDC.View(&#123;clientId: \"**********you id**********\", divId: \"adobe-dc-view\"&#125;);\n\t\tadobeDCView.previewFile(&#123;\n\t\t\tcontent:&#123;location: &#123;url: \"https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf\"&#125;&#125;,\n\t\t\tmetaData:&#123;fileName: \"Summary.pdf\"&#125;\n\t\t&#125;, &#123;&#125;);\n\t&#125;);\n&lt;/script>\n\nThen we copy this code to the markdown file of the page we want to embed with, and then we replace the url under content to my pdf link and change the fileName.\nNow the pdf is embedded in the page.\nHow to automatically adjust the size of image in post?To make a image or picture look good both on PC browser or mobile device, it is necessary to make the size of image adjust automatically. \nUsing the template under when inserting a image:\n&lt;div align&#x3D;&quot;center&quot;&gt;&lt;img src&#x3D;&quot;your image&#39;s url&quot; alt&#x3D;&quot;name&quot; style&#x3D;&quot;width: 100%;max-height: 100%&quot; &#x2F;&gt; &lt;&#x2F;div&gt;\n\nWith this style=&quot;width: 100%;max-height: 100%, it should work now.\n","tags":["Hexo"]},{"title":"Let's migrate graph to Neo4j Aura","url":"/2021/11/04/How-to-Transfer-the-local-knowledge-map-to-the-Neo4j-Aura/","content":"During the user evaluation of conversational virtual museum guide, one of the user pointed that the knowledge graph visualization was not working. The visualization of knowledge graph is meant to show the connection between entities in knowledge graph directly, to help user understand their relationships. \nThe Problem is …In my project, the visualization is implemented using Neovis.js package. It allows the graph visualization in the browser with data from Neo4j. In the config, it requires to connect with a Neo4j database, and in my case, it was connected with my local knowledge graph database, something like this:\n\nvar config &#x3D; &#123;\n                    container_id: &quot;viz&quot;,\n                    server_url: &quot;bolt:&#x2F;&#x2F;localhost:6784&quot;,\n                    server_user: &quot;neo4j&quot;,\n                    server_password: &quot;password&quot;,\n                    ...\n                    &#125;\n\nTherefore, when the user opens this page to view the visualization, the plug-in will perform queries on the local graph database based on the configuration above. The problem is that there is no graph database on the user’s computer. So, here I need to configure a database that can be accessed remotely.\nPossible way to solve itAs long as we have a remote database, or make my local database accessible remotely, this problem will be solved. There are two possible methods for it, as far as I concerned:\n\nExport my local knowledge base and upload it to a remote server\nUse tools like Ngrok to make localhost accessible by Internet\n\nFinally I chose the first method. Since the second way has an obvious shortcoming that my pc would not be a good server because it is not guaranteed to be accessible 7/24. \nAnd to find a remote server, it could be cloud server from Google or Amazon. But the complex registration and configuration would be too much work for a small project, unless you already have your own server, and the price… I don’t know. \nFortunately, Neo4j has it own cloud service, which is called Neo4j Aura, and Aura has free plan for personal use!\nHands onFirst, we need to export the knowledge graph data from local database. \nExport the dataI tried apoc.export.all.csv first, however, it didn’t work really well. The exported csv data can not be read properly on Aura. \nAnother way is generating a dump file. This way is much easier and promising. Open the Terminal of your graph database on Neo4j Desktop. And the command to generate dump is:\n$ bin\\neo4j-admin dump --database&#x3D;neo4j --to&#x3D;&#123;target path &#125;.dump\n\nResult:\nDone: 89 files, 63.31MiB processed.\n\nImport the data on AuraBefore importing, create a project on Aura, and click the title to see the import section:\n \n\nHere, drop the Dump file to upload, wait for a while for the updating and then the knowledge graph is on the cloud server now.\nThe URL for this database is offered. With the URL, name and password, now the knowledge graph can be accessed anywhere!\nIssue for the URLThe default URL of the database on Aura starts with neo4j+s:// , when I use this as the configuration in Neovis, it specifies to require SSL and a valid cert. As suggested in the document of Neovis\n\nconfig.encrypted&quot;ENCRYPTION_OFF&quot;&#96; (default) or &#96;&quot;ENCRYPTION_ON&quot;\n\nThis must be set to &quot;ENCRYPTION_ON&quot; when using a secure WebSocket connection, such as with Neo4j Aura.\n\n I added it in the config, and the page got error said:\nEncryption&#x2F;trust can only be configured either through URL or config\n\nTo solve it, as suggested in here, set the URL to be neo4j:// fixes it.  Like this:\nvar config = &#123;\n                    container_id: \"viz\",\n                    server_url: \"neo4j://fc932d9f.databases.neo4j.io\",\n                    server_user: \"neo4j\",\n                    server_password: \"password\",\n                    encrypted:'ENCRYPTION_ON',\n                    trust:'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES',\n\t\t\t\t\t...\n\t\t\t\t&#125;\n\n\n\n\n\nConnect Aura with PythonSo as I transfer the dataset to Aura, I should also update my python code, which is connected to the graph base for query using Py2neo.\nThe previous code to connect local database is:\ng &#x3D; Graph(\n            scheme&#x3D;&quot;neo4j&quot;,\n            host&#x3D;&quot;localhost&quot;,\n            port&#x3D;7687,\n            auth&#x3D;(&quot;neo4j&quot;, &quot;password&quot;))\n\n For Aura, it changes to:\ng &#x3D; Graph(&quot;neo4j+s:&#x2F;&#x2F;fc932d9f.databases.neo4j.io&quot;, auth&#x3D;(&quot;neo4j&quot;, &quot;password&quot;), routing&#x3D;True)\n\n"},{"title":"Hello World","url":"/2021/10/20/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Neo4j from desktop on Windows to docker under Linux","url":"/2022/06/23/Neo4j-from-desktop-on-Windows-to-docker-in-Linux/","content":"DockerDocker is a containerization platform that enables you to create, deploy, and run applications conveniently with the help of containers. These applications work within containers, like a lightweight VM. As a results, there will be no more installation, environment or application failure errors when you try to install it on another machine. \n\nA Docker container can use one machine, share its kernel and virtualize the OS to run more isolated processes. As a result, Docker containers are lightweight. A Docker image is like a snapshot in other types of VM environments. It is a record of a Docker container at a specific point in time.\n\nInstall Docker on Ubuntu serverFollow the instructions of Install Docker Engine on Ubuntu\nSet up the repository\nUpdate the apt package index and install packages to allow apt to use a repository over HTTPS:\nsudo apt-get update\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\nAdd Docker’s official GPG key:\nsudo mkdir -p &#x2F;etc&#x2F;apt&#x2F;keyrings\ncurl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;docker.gpg\nUse the following command to set up the repository:\n\n\necho \\\n  &quot;deb [arch&#x3D;$(dpkg --print-architecture) signed-by&#x3D;&#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;docker.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \\\n  $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null\nInstall Docker Engine\nUpdate the apt package index, and install the latest version of Docker Engine, containerd, and Docker Compose, or go to the next step to install a specific version:sudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\nTo install a specific version of Docker Engine, list the available versions in the repo, then select and install: # 1. List the versions available in your repo:\napt-cache madison docker-ce\n\n# 2. Install a specific version using the version string from the second column\nsudo apt-get install docker-ce&#x3D;&lt;VERSION_STRING&gt; docker-ce-cli&#x3D;&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin\n\n# 3. Verify that Docker Engine is installed correctly\nsudo docker run hello-world\n\nNeo4j with DockerGet files of databaseGo to the repository and download neo4j.zip. Unzip the neo4j.zip downloaded from the github, remember its location, which will be used later.\nPull the Neo4j imageI work on the conversational agent projects using a Windows laptop. So I installed Docker 4.8.1 (78998) on my computer. To run neo4j in Docker, we do not need to create an empty docker container example and download Neo4j within the container ourselves. Thanks to the Docker Hub, which is kind of similar to Github, we can download the official docker images for almost all kinds of softwares easily, such as Neo4j. To download Neo4j on Docker, use \ndocker pull neo4j\n, which will automatically pull the latest version of Neo4j on Docker.\nCreate a Neo4j containerBefore we create a container, it should be noted that I used Neo4j APOC plugin to export the whole database. Thus, I also need to enable the APOC plugin when creating a new Neo4j container, so that we can import the dataset. Another important config setting is NEO4J_dbms_allow__upgrade=true, which allows the database upgrade, otherwise, the unzipped database above can not be imported automatically.\nI use command below to create a Neo4j container:\ndocker run -p 7474:7474 -p 7687:7687 \\\n        --volume&#x3D;$HOME&#x2F;neo4j&#x2F;data:&#x2F;data \\\n        --volume&#x3D;$HOME&#x2F;neo4j&#x2F;logs:&#x2F;logs \\\n        --volume&#x3D;$HOME&#x2F;neo4j&#x2F;import:&#x2F;var&#x2F;lib&#x2F;neo4j&#x2F;import \\\n        --volume&#x3D;$HOME&#x2F;neo4j&#x2F;plugins:&#x2F;plugins \\\n        --name neo4j-apoc \\\n        --env NEO4J_AUTH&#x3D;neo4j&#x2F;000000 \\\n        --env&#x3D;NEO4J_dbms_allow__upgrade&#x3D;true \\\n        -e NEO4J_apoc_export_file_enabled&#x3D;true \\\n        -e NEO4J_apoc_import_file_enabled&#x3D;true \\\n        -e NEO4J_apoc_import_file_use__neo4j__config&#x3D;true \\\n        -e NEO4JLABS_PLUGINS&#x3D;\\[\\&quot;apoc\\&quot;\\] \\\n        neo4j:latest\n\nwhere $HOME/neo4j/import should be the path the exported csv file located, which is /home/d in my case. The initialization takes a while, after that, the new imported Neo4j database is up running and can be accessed.\n\nAPOC Name History\nAPOC was the technician and driver on board of the Nebuchadnezzar in the Matrix movie. He was killed by Cypher.\nAPOC was also the first bundled A Package Of Component for Neo4j in 2009.\nAPOC also stands for “Awesome Procedures On Cypher”\n\nSkip the docker run every single timeSets the docker service to start when the server starts:\nsudo systemctl enable docker\n\nMake the container auto run\ndocker update --restart&#x3D;always &lt;container-name&gt;\n\n","tags":["docker"]},{"title":"Use Gunicorn, Cloudflared and Ngrok on Linux for a Simple Production","url":"/2022/06/24/Use-Gunicorn-Cloudflared-and-Ngrok-on-Linux-for-a-Simple-Production/","content":"A local Flask web server is not enough when …For about half a year, the services which support my virtual museum guide, such as Knowledge Graph query and recommendation generating, are hosted on my local machine intermittently. These services are created as APIs using Flask framework, and then I used Ngrok to make the services exposed to the Internet. For web applications in university projects, I usually start with Flask because of the lightness and easiness of Flask: all you have to do is one line like\napp.run()\nafter defining the functions, then an locally accessible web application is up running. However, Flask is not suitable for production since its built-in server does not scale well. Just like the WARNING received when you run a simple Flask project:\n* Serving Flask app &#39;app&#39; (lazy loading)\n* Environment: production\n  WARNING: This is a development server. Do not use it in a production deployment.\n  Use a production WSGI server instead.\n* Debug mode: off\n* Running on http:&#x2F;&#x2F;127.0.0.1:5000&#x2F; (Press CTRL+C to quit)\n\nA demo presentation for the virtual museum guide is coming soon in mid June and I am planning to deploy the project at the server of University of Twente. Before that, we need to make it production-ready (to a bit wider audience),\nUse Gunicorn as server\nGunicorn ‘Green Unicorn’ is a Python WSGI HTTP for UNIX. It’s a pre-fork worker model. The Gunicorn server is broadly compatible with various web frameworks, simply implemented, light on server resources, and fairly speedy.\n\nThis article explains how to use gunicorn to optimize the performance.To install the gunicorn:\npip install gunicorn \n\nUsing gunicorn to run the flask application:\ngunicorn -w 1 -b 0.0.0.0:5000 app:app\n\nNote:\n\n-w equals to --workers, which represents the number of workers;\n-b equals to --bind, which specifies the bind address (must be local host and for both IPV4 and IPV6);\n-k equals to --worker-class, specifies the type of workers to use, such as sync, eventlet, gevent, tornado and gthread. And we could use gevent here, gevent is a coroutine-based Python networking library that uses greenlet to provide a high-level synchronous API on top of the libev or libuv event loop.\n\nCreate a Linux serviceCreate service firstly:\nsudo nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;&lt;service-name&gt;.service\nThen write:\n[Unit]\nDescription&#x3D;Gunicorn instance to serve virtual museum agent\nAfter&#x3D;network.target\n\n[Service]\nUser&#x3D;&lt;user-name&gt; \nGroup&#x3D;www-data\nExecStartPre&#x3D;&#x2F;bin&#x2F;sleep 60\nWorkingDirectory&#x3D;&#x2F;home&#x2F;&lt;user-name&gt;&#x2F;HHAI2022_Virtual_Museum_Guide                             \nEnvironment&#x3D;&quot;PATH&#x3D;&#x2F;home&#x2F;&lt;user-name&gt;&#x2F;HHAI2022_Virtual_Museum_Guide&#x2F;&lt;venv-name&gt;&#x2F;bin&quot;\nExecStart&#x3D;&#x2F;home&#x2F;&lt;user-name&gt;&#x2F;HHAI2022_Virtual_Museum_Guide&#x2F;&lt;venv-name&gt;&#x2F;bin&#x2F;gunicorn -w 1 -b 0.0.0.0:5000 app:app\n\n[Install]\nWantedBy&#x3D;multi-user.target\n\nThen enable the service:\nsudo systemctl enable &lt;service-name&gt;.service --now\nExpose the service to the InternetOption 1: Cloudflare (Free)Cloudflare can create a Tunnel and securely make a local service accessible to the Internet. This part I followed a tutorial to create such a tunnel via Cloudflare on Ubuntu 20.04 LTS server.\n\nCloudflare is a global network designed to make everything you connect to the Internet secure, private, fast, and reliable. Cloudflare offers a suite of services and Zero Trust Services are the services we will utilize in the following tutorials. Zero Trust Services consist of Teams, Access, Gateway and Browser Isolation.\n\n\nOur main goal is to obtain a free domain from Freenom and connect our hosted applications on a Ubuntu 20.04 LTS server within our local home network via a Cloudflare Tunnel to the world wide web securely without any port-forwarding complications or altering firewall.\n\nStep 1: Install Cloudflarecurl -LO https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;cloudflared&#x2F;releases&#x2F;latest&#x2F;download&#x2F;cloudflared-linux-amd64.deb\nsudo dpkg -i cloudflared-linux-amd64.deb\nsudo rm cloudflared-linux-amd64.deb\n\nStep 2: Log incloudflared tunnel login\nAt this point, a URL will pop up, open it with a browser, log in to authentication, and then select the domain name you want to use to penetrate the internal network.\nAfter success, a certificate will be generated and placed in ~/Cloudflared/Cert.pem.\nStep 3: Create a tunnelcloudflared tunnel create &lt;Tunnel-NAME&gt;\nAfter success, it will be prompted that the json file has been placed in ~/.CloudFlared/&lt;Tunnel-UUID&gt;.json.\nStep 4: Create DNS records to route traffic to the Tunnelcloudflared tunnel route dns &lt;Tunnel-NAME&gt; &lt;SUBDOMAIN&gt;\n\nStep 5: Create config file for the new tunnelnano ~&#x2F;.cloudflared&#x2F;config.yml\nChange the config as:\ntunnel: &lt;Tunnel-NAME&gt;\ncredentials-file: &#x2F;home&#x2F;&lt;user-name&gt;&#x2F;.cloudflared&#x2F;&lt;Tunnel-UUID&gt;.json\ningress:\n  - hostname: &lt;domain-name&gt;\n    service: http:&#x2F;&#x2F;localhost:5000\n    originRequest:\n      noTLSVerify: true\n  - service: http_status:404\n\nStep 6: Create a Linux serviceFirst, we create a service:\nnano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;cloudflared.service\nWrite the content like:\n[Unit]\nDescription&#x3D;cloudflared\nAfter&#x3D;network.target\n\n[Service]\nTimeoutStartSec&#x3D;0\nType&#x3D;notify\nExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;cloudflared --loglevel debug --transport-loglevel warn --config &#x2F;home&#x2F;&lt;user-name&gt;&#x2F;.cloudflared&#x2F;config.yml tunnel run &lt;Tunnel-NAME&gt;\nRestart&#x3D;on-failure\nRestartSec&#x3D;5s\n\n[Install]\nWantedBy&#x3D;multi-user.target\nThen, enable this service:\nsystemctl enable cloudflared --now\nAs a result, the Linux server will automatically run this service.\nNgrok (Subscribe needed when long-term use)Ngrok is a cross-platform application that exposes local server ports to the Internet.\n\n\n\nPros\nCons\n\n\n\nLight and easy\nFor free users, domain name changes every time the Ngrok restarts\n\n\nStable\n240 euro a year for a fixed domain name\n\n\nFollowing the steps:\n\nInstall ngrok on the linux server with Apt: curl -s https:&#x2F;&#x2F;ngrok-agent.s3.amazonaws.com&#x2F;ngrok.asc | \\\n      sudo tee &#x2F;etc&#x2F;apt&#x2F;trusted.gpg.d&#x2F;ngrok.asc &gt;&#x2F;dev&#x2F;null &amp;&amp; \\\n      echo &quot;deb https:&#x2F;&#x2F;ngrok-agent.s3.amazonaws.com buster main&quot; | \\\n      sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ngrok.list &amp;&amp; \\\n      sudo apt update &amp;&amp; sudo apt install ngrok\nAdd auth with ngrok config add-authtoken [authtoken]\nStart listening the service ngrok http 5000\nCongrats! Easy right?Note: The forwarding address is temporary, and it will change when we restart the ngrok.Session Status                online                                                                                                                                                       \nAccount                       &lt;your account&gt; (Plan: Free)                                                                                                                            \nUpdate                        update available (version 3.0.5, Ctrl-U to update)                                                                                                           \nVersion                       3.0.3                                                                                                                                                        \nRegion                        Europe (eu)                                                                                                                                                  \nLatency                       19.657864ms                                                                                                                                               \nWeb Interface                 http:&#x2F;&#x2F;127.0.0.1:4040                                                                                                                                        \nForwarding                    https:&#x2F;&#x2F;d0e3-86-89-214-254.eu.ngrok.io -&gt; http:&#x2F;&#x2F;localhost:5000                                                                                              \n                                                                                                                                                                                           \nConnections                   ttl     opn     rt1     rt5     p50     p90                                                                                                                  \n                              0       0       0.00    0.00    0.00    0.00     \n\n"}]