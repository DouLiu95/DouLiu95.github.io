<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dou Liu</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-24T09:25:41.494Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Use Gunicorn, Cloudflared and Ngrok on Linux for a Simple Production</title>
    <link href="http://example.com/2022/06/24/Use-Gunicorn-Cloudflared-and-Ngrok-on-Linux-for-a-Simple-Production/"/>
    <id>http://example.com/2022/06/24/Use-Gunicorn-Cloudflared-and-Ngrok-on-Linux-for-a-Simple-Production/</id>
    <published>2022-06-24T08:21:26.000Z</published>
    <updated>2022-06-24T09:25:41.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-local-Flask-web-server-is-not-enough-when-…"><a href="#A-local-Flask-web-server-is-not-enough-when-…" class="headerlink" title="A local Flask web server is not enough when …"></a>A local Flask web server is not enough when …</h1><p>For about half a year, the services which support my virtual museum guide, such as Knowledge Graph query and recommendation generating, are hosted on my local machine intermittently. These services are created as APIs using Flask framework, and then I used Ngrok to make the services exposed to the Internet. For web applications in university projects, I usually start with Flask because of the lightness and easiness of Flask: all you have to do is one line like</p><pre class="language-none"><code class="language-none">app.run()</code></pre><p>after defining the functions, then an locally accessible web application is up running. However, Flask is not suitable for production since its built-in server does not scale well. Just like the <strong>WARNING</strong> received when you run a simple Flask project:</p><pre class="language-none"><code class="language-none">* Serving Flask app &#39;app&#39; (lazy loading)* Environment: production  WARNING: This is a development server. Do not use it in a production deployment.  Use a production WSGI server instead.* Debug mode: off* Running on http:&#x2F;&#x2F;127.0.0.1:5000&#x2F; (Press CTRL+C to quit)</code></pre><p>A demo presentation for the virtual museum guide is coming soon in mid June and I am planning to deploy the project at the server of University of Twente. Before that, we need to make it production-ready (to a bit wider audience),</p><h3 id="Use-Gunicorn-as-server"><a href="#Use-Gunicorn-as-server" class="headerlink" title="Use Gunicorn as server"></a>Use Gunicorn as server</h3><blockquote><p>Gunicorn ‘Green Unicorn’ is a Python WSGI HTTP for UNIX. It’s a pre-fork worker model. The Gunicorn server is broadly compatible with various web frameworks, simply implemented, light on server resources, and fairly speedy.</p></blockquote><p>This <a class="link"   href="https://medium.com/building-the-system/gunicorn-3-means-of-concurrency-efbb547674b7" >article<i class="fas fa-external-link-alt"></i></a> explains how to use <code>gunicorn</code> to optimize the performance.<br>To install the <code>gunicorn</code>:</p><pre class="language-none"><code class="language-none">pip install gunicorn </code></pre><p>Using gunicorn to run the flask application:</p><pre class="language-none"><code class="language-none">gunicorn -w 1 -b 0.0.0.0:5000 app:app</code></pre><p><strong>Note</strong>:</p><ol><li><code>-w</code> equals to <code>--workers</code>, which represents the number of workers;</li><li><code>-b</code> equals to <code>--bind</code>, which specifies the bind address (must be local host and for both IPV4 and IPV6);</li><li><code>-k</code> equals to <code>--worker-class</code>, specifies the type of workers to use, such as <code>sync</code>, <code>eventlet</code>, <code>gevent</code>, <code>tornado</code> and <code>gthread</code>. And we could use <a class="link"   href="http://www.gevent.org/" >gevent<i class="fas fa-external-link-alt"></i></a> here, <code>gevent</code> is a coroutine-based Python networking library that uses greenlet to provide a high-level synchronous API on top of the libev or libuv event loop.</li></ol><h4 id="Create-a-Linux-service"><a href="#Create-a-Linux-service" class="headerlink" title="Create a Linux service"></a>Create a Linux service</h4><p>Create service firstly:</p><pre class="language-none"><code class="language-none">sudo nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;&lt;service-name&gt;.service</code></pre><p>Then write:</p><pre class="language-none"><code class="language-none">[Unit]Description&#x3D;Gunicorn instance to serve virtual museum agentAfter&#x3D;network.target[Service]User&#x3D;d    Group&#x3D;www-dataExecStartPre&#x3D;&#x2F;bin&#x2F;sleep 60  # this service should run after the docker container is active and up running, so wait 60s firstWorkingDirectory&#x3D;&#x2F;home&#x2F;d&#x2F;HHAI2022_Virtual_Museum_Guide                             Environment&#x3D;&quot;PATH&#x3D;&#x2F;home&#x2F;d&#x2F;HHAI2022_Virtual_Museum_Guide&#x2F;&lt;venv-name&gt;&#x2F;bin&quot;ExecStart&#x3D;&#x2F;home&#x2F;d&#x2F;HHAI2022_Virtual_Museum_Guide&#x2F;&lt;venv-name&gt;&#x2F;bin&#x2F;gunicorn -w 1 -b 0.0.0.0:5000 app:app[Install]WantedBy&#x3D;multi-user.target</code></pre><p>Then enable the service:</p><pre class="language-none"><code class="language-none">sudo systemctl enable &lt;service-name&gt;.service --now</code></pre><h1 id="Expose-the-service-to-the-Internet"><a href="#Expose-the-service-to-the-Internet" class="headerlink" title="Expose the service to the Internet"></a>Expose the service to the Internet</h1><h2 id="Option-1-Cloudflare-Free"><a href="#Option-1-Cloudflare-Free" class="headerlink" title="Option 1: Cloudflare (Free)"></a>Option 1: Cloudflare (Free)</h2><p>Cloudflare can create a Tunnel and securely make a local service accessible to the Internet. This part I followed a <a class="link"   href="https://omar2cloud.github.io/cloudflare/" >tutorial<i class="fas fa-external-link-alt"></i></a> to create such a tunnel via Cloudflare on Ubuntu 20.04 LTS server.</p><blockquote><p><strong>Cloudflare</strong> is a global network designed to make everything you connect to the Internet secure, private, fast, and reliable. Cloudflare offers a suite of services and <strong>Zero Trust Services</strong> are the services we will utilize in the following tutorials. Zero Trust Services consist of Teams, Access, Gateway and Browser Isolation.</p></blockquote><blockquote><p>Our main goal is to obtain a free domain from <strong>Freenom</strong> and connect our hosted applications on a Ubuntu 20.04 LTS server within our local home network via a Cloudflare Tunnel to the world wide web securely without any port-forwarding complications or altering firewall.</p></blockquote><h4 id="Step-1-Install-Cloudflare"><a href="#Step-1-Install-Cloudflare" class="headerlink" title="Step 1: Install Cloudflare"></a>Step 1: Install Cloudflare</h4><pre class="language-none"><code class="language-none">curl -LO https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;cloudflared&#x2F;releases&#x2F;latest&#x2F;download&#x2F;cloudflared-linux-amd64.debsudo dpkg -i cloudflared-linux-amd64.debsudo rm cloudflared-linux-amd64.deb</code></pre><h4 id="Step-2-Log-in"><a href="#Step-2-Log-in" class="headerlink" title="Step 2: Log in"></a>Step 2: Log in</h4><pre class="language-none"><code class="language-none">cloudflared tunnel login</code></pre><p>At this point, a URL will pop up, open it with a browser, log in to authentication, and then select the domain name you want to use to penetrate the internal network.</p><p>After success, a certificate will be generated and placed in <code>~/Cloudflared/Cert.pem</code>.</p><h4 id="Step-3-Create-a-tunnel"><a href="#Step-3-Create-a-tunnel" class="headerlink" title="Step 3: Create a tunnel"></a>Step 3: Create a tunnel</h4><pre class="language-none"><code class="language-none">cloudflared tunnel create &lt;Tunnel-NAME&gt;</code></pre><p>After success, it will be prompted that the json file has been placed in <code>~/.CloudFlared/&lt;Tunnel-UUID&gt;.json</code>.</p><h4 id="Step-4-Create-DNS-records-to-route-traffic-to-the-Tunnel"><a href="#Step-4-Create-DNS-records-to-route-traffic-to-the-Tunnel" class="headerlink" title="Step 4: Create DNS records to route traffic to the Tunnel"></a>Step 4: Create DNS records to route traffic to the Tunnel</h4><pre class="language-none"><code class="language-none">cloudflared tunnel route dns &lt;Tunnel-NAME&gt; &lt;SUBDOMAIN&gt;</code></pre><h4 id="Step-5-Create-config-file-for-the-new-tunnel"><a href="#Step-5-Create-config-file-for-the-new-tunnel" class="headerlink" title="Step 5: Create config file for the new tunnel"></a>Step 5: Create config file for the new tunnel</h4><pre class="language-none"><code class="language-none">nano ~&#x2F;.cloudflared&#x2F;config.yml</code></pre><p>Change the config as:</p><pre class="language-none"><code class="language-none">tunnel: &lt;Tunnel-NAME&gt;credentials-file: &#x2F;root&#x2F;.cloudflared&#x2F;&lt;Tunnel-UUID&gt;.jsoningress:  - hostname: &lt;domain-name&gt;    service: http:&#x2F;&#x2F;localhost:5000    originRequest:      noTLSVerify: true  - service: http_status:404</code></pre><h4 id="Step-6-Create-a-Linux-service"><a href="#Step-6-Create-a-Linux-service" class="headerlink" title="Step 6: Create a Linux service"></a>Step 6: Create a Linux service</h4><p>First, we create a service:</p><pre class="language-none"><code class="language-none">nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;cloudflared.service</code></pre><p>Write the content like:</p><pre class="language-none"><code class="language-none">[Unit]Description&#x3D;cloudflaredAfter&#x3D;network.target[Service]TimeoutStartSec&#x3D;0Type&#x3D;notifyExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;cloudflared --loglevel debug --transport-loglevel warn --config &#x2F;root&#x2F;.cloudflared&#x2F;config.yml tunnel run &lt;Tunnel-NAME&gt;Restart&#x3D;on-failureRestartSec&#x3D;5s[Install]WantedBy&#x3D;multi-user.target</code></pre><p>Then, enable this service:</p><pre class="language-none"><code class="language-none">systemctl enable cloudflared --now</code></pre><p>As a result, the Linux server will automatically run this service.</p><h2 id="Ngrok-Subscribe-needed-when-long-term-use"><a href="#Ngrok-Subscribe-needed-when-long-term-use" class="headerlink" title="Ngrok (Subscribe needed when long-term use)"></a>Ngrok (Subscribe needed when long-term use)</h2><p><a class="link"   href="https://ngrok.com/docs/getting-started" >Ngrok<i class="fas fa-external-link-alt"></i></a> is a cross-platform application that exposes local server ports to the Internet.</p><table><thead><tr><th align="center">Pros</th><th align="center">Cons</th></tr></thead><tbody><tr><td align="center">Light and easy</td><td align="center">For free users, domain name changes every time the Ngrok restarts</td></tr><tr><td align="center">Stable</td><td align="center">240 euro a year for a fixed domain name</td></tr></tbody></table><p>Following the steps:</p><ol><li>Install <code>ngrok</code> on the linux server with Apt: <pre class="language-none"><code class="language-none">curl -s https:&#x2F;&#x2F;ngrok-agent.s3.amazonaws.com&#x2F;ngrok.asc | \      sudo tee &#x2F;etc&#x2F;apt&#x2F;trusted.gpg.d&#x2F;ngrok.asc &gt;&#x2F;dev&#x2F;null &amp;&amp; \      echo &quot;deb https:&#x2F;&#x2F;ngrok-agent.s3.amazonaws.com buster main&quot; | \      sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ngrok.list &amp;&amp; \      sudo apt update &amp;&amp; sudo apt install ngrok</code></pre></li><li>Add auth with <pre class="language-none"><code class="language-none">ngrok config add-authtoken [authtoken]</code></pre></li><li>Start listening the service <pre class="language-none"><code class="language-none">ngrok http 5000</code></pre></li><li>Congrats! Easy right?<br>Note: The forwarding address is temporary, and it will change when we restart the ngrok.<pre class="language-none"><code class="language-none">Session Status                online                                                                                                                                                       Account                       &lt;your account&gt; (Plan: Free)                                                                                                                            Update                        update available (version 3.0.5, Ctrl-U to update)                                                                                                           Version                       3.0.3                                                                                                                                                        Region                        Europe (eu)                                                                                                                                                  Latency                       19.657864ms                                                                                                                                               Web Interface                 http:&#x2F;&#x2F;127.0.0.1:4040                                                                                                                                        Forwarding                    https:&#x2F;&#x2F;d0e3-86-89-214-254.eu.ngrok.io -&gt; http:&#x2F;&#x2F;localhost:5000                                                                                                                                                                                                                                                                                         Connections                   ttl     opn     rt1     rt5     p50     p90                                                                                                                                                0       0       0.00    0.00    0.00    0.00     </code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-local-Flask-web-server-is-not-enough-when-…&quot;&gt;&lt;a href=&quot;#A-local-Flask-web-server-is-not-enough-when-…&quot; class=&quot;headerlink&quot; title=&quot;A </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Neo4j from desktop on Windows to docker under Linux</title>
    <link href="http://example.com/2022/06/23/Neo4j-from-desktop-on-Windows-to-docker-in-Linux/"/>
    <id>http://example.com/2022/06/23/Neo4j-from-desktop-on-Windows-to-docker-in-Linux/</id>
    <published>2022-06-23T15:08:27.000Z</published>
    <updated>2022-06-23T19:19:53.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker is a containerization platform that enables you to create, deploy, and run applications conveniently with the help of containers. These applications work within containers, like a lightweight VM. As a results, there will be no more installation, environment or application failure errors when you try to install it on another machine. </p><blockquote><p>A Docker container can use one machine, share its kernel and virtualize the OS to run more isolated processes. As a result, Docker containers are lightweight. A Docker image is like a snapshot in other types of VM environments. It is a record of a Docker container at a specific point in time.</p></blockquote><h3 id="Install-Docker-on-Ubuntu-server"><a href="#Install-Docker-on-Ubuntu-server" class="headerlink" title="Install Docker on Ubuntu server"></a>Install Docker on Ubuntu server</h3><p>Follow the instructions of <a class="link"   href="https://docs.docker.com/engine/install/ubuntu/" >Install Docker Engine on Ubuntu<i class="fas fa-external-link-alt"></i></a></p><h4 id="Set-up-the-repository"><a href="#Set-up-the-repository" class="headerlink" title="Set up the repository"></a>Set up the repository</h4><ol><li><p>Update the <code>apt</code> package index and install packages to allow <code>apt</code> to use a repository over HTTPS:</p><pre class="language-sh" data-language="sh"><code class="language-sh">sudo apt-get updatesudo apt-get install \    ca-certificates \    curl \    gnupg \    lsb-release</code></pre></li><li><p>Add Docker’s official GPG key:</p><pre class="language-sh" data-language="sh"><code class="language-sh">sudo mkdir -p &#x2F;etc&#x2F;apt&#x2F;keyringscurl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;docker.gpg</code></pre></li><li><p>Use the following command to set up the repository:</p></li></ol><pre class="language-sh" data-language="sh"><code class="language-sh">echo \  &quot;deb [arch&#x3D;$(dpkg --print-architecture) signed-by&#x3D;&#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;docker.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \  $(lsb_release -cs) stable&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null</code></pre><h4 id="Install-Docker-Engine"><a href="#Install-Docker-Engine" class="headerlink" title="Install Docker Engine"></a>Install Docker Engine</h4><ol><li>Update the <code>apt</code> package index, and install the latest version of Docker Engine, containerd, and Docker Compose, or go to the next step to install a specific version:<pre class="language-sh" data-language="sh"><code class="language-sh">sudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</code></pre></li><li>To install a specific version of Docker Engine, list the available versions in the repo, then select and install: <pre class="language-sh" data-language="sh"><code class="language-sh"># 1. List the versions available in your repo:apt-cache madison docker-ce# 2. Install a specific version using the version string from the second columnsudo apt-get install docker-ce&#x3D;&lt;VERSION_STRING&gt; docker-ce-cli&#x3D;&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin# 3. Verify that Docker Engine is installed correctlysudo docker run hello-world</code></pre></li></ol><h1 id="Neo4j-with-Docker"><a href="#Neo4j-with-Docker" class="headerlink" title="Neo4j with Docker"></a>Neo4j with Docker</h1><h3 id="Get-files-of-database"><a href="#Get-files-of-database" class="headerlink" title="Get files of database"></a>Get files of database</h3><p>Go to the repository and download <code>neo4j.zip</code>. Unzip the <code>neo4j.zip</code> downloaded from the github, remember its location, which will be used later.</p><h3 id="Pull-the-Neo4j-image"><a href="#Pull-the-Neo4j-image" class="headerlink" title="Pull the Neo4j image"></a>Pull the Neo4j image</h3><p>I work on the conversational agent projects using a Windows laptop. So I installed <code>Docker 4.8.1 (78998)</code> on my computer. To run neo4j in Docker, we do not need to create an empty docker container example and download Neo4j within the container ourselves. Thanks to the Docker Hub, which is kind of similar to Github, we can download the official docker images for almost all kinds of softwares easily, such as Neo4j. To download <a class="link"   href="https://hub.docker.com/_/neo4j/" >Neo4j on Docker<i class="fas fa-external-link-alt"></i></a>, use </p><pre class="language-sh" data-language="sh"><code class="language-sh">docker pull neo4j</code></pre><p>, which will automatically pull the latest version of Neo4j on Docker.</p><h3 id="Create-a-Neo4j-container"><a href="#Create-a-Neo4j-container" class="headerlink" title="Create a Neo4j container"></a>Create a Neo4j container</h3><p>Before we create a container, it should be noted that I used <code>Neo4j APOC</code> plugin to export the whole database. Thus, I also need to enable the APOC plugin when creating a new Neo4j container, so that we can import the dataset. Another important config setting is <code>NEO4J_dbms_allow__upgrade=true</code>, which allows the database upgrade, otherwise, the unzipped database above can not be imported automatically.</p><p>I use command below to create a Neo4j container:</p><pre class="language-sh" data-language="sh"><code class="language-sh">docker run -p 7474:7474 -p 7687:7687 \        --volume&#x3D;$HOME&#x2F;neo4j&#x2F;data:&#x2F;data \        --volume&#x3D;$HOME&#x2F;neo4j&#x2F;logs:&#x2F;logs \        --volume&#x3D;$HOME&#x2F;neo4j&#x2F;import:&#x2F;var&#x2F;lib&#x2F;neo4j&#x2F;import \        --volume&#x3D;$HOME&#x2F;neo4j&#x2F;plugins:&#x2F;plugins \        --name neo4j-apoc \        --env NEO4J_AUTH&#x3D;neo4j&#x2F;000000 \        --env&#x3D;NEO4J_dbms_allow__upgrade&#x3D;true \        -e NEO4J_apoc_export_file_enabled&#x3D;true \        -e NEO4J_apoc_import_file_enabled&#x3D;true \        -e NEO4J_apoc_import_file_use__neo4j__config&#x3D;true \        -e NEO4JLABS_PLUGINS&#x3D;\[\&quot;apoc\&quot;\] \        neo4j:latest</code></pre><p>where <code>$HOME/neo4j/import</code> should be the path the exported csv file located, which is <code>/home/d</code> in my case. The initialization takes a while, after that, the new imported Neo4j database is up running and can be accessed.</p><blockquote><p>APOC Name History</p><p>APOC was the technician and driver on board of the Nebuchadnezzar in the Matrix movie. He was killed by Cypher.</p><p>APOC was also the first bundled A Package Of Component for Neo4j in 2009.</p><p>APOC also stands for “Awesome Procedures On Cypher”</p></blockquote><h1 id="Skip-the-docker-run-every-single-time"><a href="#Skip-the-docker-run-every-single-time" class="headerlink" title="Skip the docker run every single time"></a>Skip the docker run every single time</h1><p>Sets the docker service to start when the server starts:</p><pre class="language-none"><code class="language-none">sudo systemctl enable docker</code></pre><p>Make the container auto run</p><pre class="language-none"><code class="language-none">docker update --restart&#x3D;always &lt;container-name&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;p&gt;Docker is a containerization platform that enables you</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s migrate graph to Neo4j Aura</title>
    <link href="http://example.com/2021/11/04/How-to-Transfer-the-local-knowledge-map-to-the-Neo4j-Aura/"/>
    <id>http://example.com/2021/11/04/How-to-Transfer-the-local-knowledge-map-to-the-Neo4j-Aura/</id>
    <published>2021-11-04T17:45:41.000Z</published>
    <updated>2021-11-19T16:23:00.304Z</updated>
    
    <content type="html"><![CDATA[<p>During the user evaluation of conversational virtual museum guide, one of the user pointed that the knowledge graph visualization was not working. The visualization of knowledge graph is meant to show the connection between entities in knowledge graph directly, to help user understand their relationships. </p><h2 id="The-Problem-is-…"><a href="#The-Problem-is-…" class="headerlink" title="The Problem is …"></a>The Problem is …</h2><p>In my project, the visualization is implemented using <a class="link"   href="https://github.com/neo4j-contrib/neovis.js/" >Neovis.js<i class="fas fa-external-link-alt"></i></a> package. It allows the graph visualization in the browser with data from Neo4j. In the config, it requires to connect with a Neo4j database, and in my case, it was connected with my local knowledge graph database, something like this:</p><pre class="language-none"><code class="language-none">var config &#x3D; &#123;                    container_id: &quot;viz&quot;,                    server_url: &quot;bolt:&#x2F;&#x2F;localhost:6784&quot;,                    server_user: &quot;neo4j&quot;,                    server_password: &quot;password&quot;,                    ...                    &#125;</code></pre><p>Therefore, when the user opens this page to view the visualization, the plug-in will perform queries on the local graph database based on the configuration above. The problem is that there is no graph database on the user’s computer. So, here I need to configure a database that can be accessed remotely.</p><h2 id="Possible-way-to-solve-it"><a href="#Possible-way-to-solve-it" class="headerlink" title="Possible way to solve it"></a>Possible way to solve it</h2><p>As long as we have a remote database, or make my local database accessible remotely, this problem will be solved. There are two possible methods for it, as far as I concerned:</p><ol><li>Export my local knowledge base and upload it to a remote server</li><li>Use tools like <a class="link"   href="https://ngrok.com/" >Ngrok<i class="fas fa-external-link-alt"></i></a> to make localhost accessible by Internet</li></ol><p>Finally I chose the first method. Since the second way has an obvious shortcoming that my pc would not be a good server because it is not guaranteed to be accessible 7/24. </p><p>And to find a remote server, it could be cloud server from Google or Amazon. But the complex registration and configuration would be too much work for a small project, unless you already have your own server, and the price… I don’t know. </p><p>Fortunately, Neo4j has it own cloud service, which is called Neo4j <a class="link"   href="https://neo4j.com/cloud/aura/" >Aura<i class="fas fa-external-link-alt"></i></a>, and Aura has free plan for personal use!</p><h2 id="Hands-on"><a href="#Hands-on" class="headerlink" title="Hands on"></a>Hands on</h2><p>First, we need to export the knowledge graph data from local database. </p><h4 id="Export-the-data"><a href="#Export-the-data" class="headerlink" title="Export the data"></a>Export the data</h4><p>I tried <code>apoc.export.all.csv</code> first, however, it didn’t work really well. The exported csv data can not be read properly on Aura. </p><p>Another way is generating a dump file. This way is much easier and promising. Open the Terminal of your graph database on Neo4j Desktop. And the command to generate dump is:</p><pre class="language-none"><code class="language-none">$ bin\neo4j-admin dump --database&#x3D;neo4j --to&#x3D;&#123;target path &#125;.dump</code></pre><p>Result:</p><pre class="language-none"><code class="language-none">Done: 89 files, 63.31MiB processed.</code></pre><h4 id="Import-the-data-on-Aura"><a href="#Import-the-data-on-Aura" class="headerlink" title="Import the data on Aura"></a>Import the data on Aura</h4><p>Before importing, create a project on Aura, and click the title to see the import section:</p><div align="center"><img src="https://raw.githubusercontent.com/DouLiu95/hexo-site-comments/main/20211119/aura.2wl20tu2im0.png" alt="Aura upload" style="width: 100%;max-height: 100%" /> </div><p>Here, drop the Dump file to upload, wait for a while for the updating and then the knowledge graph is on the cloud server now.</p><p>The URL for this database is offered. With the URL, name and password, now the knowledge graph can be accessed anywhere!</p><h4 id="Issue-for-the-URL"><a href="#Issue-for-the-URL" class="headerlink" title="Issue for the URL"></a>Issue for the URL</h4><p>The default URL of the database on Aura starts with <code>neo4j+s://</code> , when I use this as the configuration in Neovis, it specifies to require SSL and a valid cert. As suggested in the document of Neovis</p><blockquote><h4 id="config-encrypted"><a href="#config-encrypted" class="headerlink" title="config.encrypted"></a><code>config.encrypted</code></h4><pre class="language-none"><code class="language-none">&quot;ENCRYPTION_OFF&quot;&#96; (default) or &#96;&quot;ENCRYPTION_ON&quot;</code></pre><p>This must be set to <code>&quot;ENCRYPTION_ON&quot;</code> when using a secure WebSocket connection, such as with Neo4j Aura.</p></blockquote><p> I added it in the config, and the page got error said:</p><pre class="language-none"><code class="language-none">Encryption&#x2F;trust can only be configured either through URL or config</code></pre><p>To solve it, as suggested in <a class="link"   href="https://github.com/grand-stack/grand-stack-starter/issues/129" >here<i class="fas fa-external-link-alt"></i></a>, set the URL to be <code>neo4j://</code> fixes it.  Like this:</p><pre class="language-html" data-language="html"><code class="language-html">var config = &#123;                    container_id: "viz",                    server_url: "neo4j://fc932d9f.databases.neo4j.io",                    server_user: "neo4j",                    server_password: "password",                    encrypted:'ENCRYPTION_ON',                    trust:'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES',...&#125;</code></pre><h4 id="Connect-Aura-with-Python"><a href="#Connect-Aura-with-Python" class="headerlink" title="Connect Aura with Python"></a>Connect Aura with Python</h4><p>So as I transfer the dataset to Aura, I should also update my python code, which is connected to the graph base for query using Py2neo.</p><p>The previous code to connect local database is:</p><pre class="language-none"><code class="language-none">g &#x3D; Graph(            scheme&#x3D;&quot;neo4j&quot;,            host&#x3D;&quot;localhost&quot;,            port&#x3D;7687,            auth&#x3D;(&quot;neo4j&quot;, &quot;password&quot;))</code></pre><p> For Aura, it changes to:</p><pre class="language-none"><code class="language-none">g &#x3D; Graph(&quot;neo4j+s:&#x2F;&#x2F;fc932d9f.databases.neo4j.io&quot;, auth&#x3D;(&quot;neo4j&quot;, &quot;password&quot;), routing&#x3D;True)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;During the user evaluation of conversational virtual museum guide, one of the user pointed that the knowledge graph visualization was not</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Why blog?</title>
    <link href="http://example.com/2021/10/21/Create-First-Post/"/>
    <id>http://example.com/2021/10/21/Create-First-Post/</id>
    <published>2021-10-21T07:55:19.000Z</published>
    <updated>2021-11-19T16:23:41.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why-Do-I-Need-the-Blog"><a href="#Why-Do-I-Need-the-Blog" class="headerlink" title="Why Do I Need the Blog"></a>Why Do I Need the Blog</h1><p>Having my personal blog is always on my to-do-list but with lower priority. As the time of graduating approaching, I realized it is the best time to do it now, as I should get prepared of my previous work and project collection for job application, so why not? Not to mention I could share my learning progress, technics, results and mistakes I made with much more people here. </p><h1 id="Hexo-and-Github-Pages"><a href="#Hexo-and-Github-Pages" class="headerlink" title="Hexo and Github Pages"></a>Hexo and Github Pages</h1><p>I do not want to spend too much time choosing the technology or service to use and building the site. So finally hexo and github pages seem to be a solution</p><h2 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo"></a>What is Hexo</h2><blockquote><p>Hexo is a fast, simple and powerful blog framework. You write posts in <a class="link"   href="http://daringfireball.net/projects/markdown/" >Markdown<i class="fas fa-external-link-alt"></i></a> (or other markup languages) and Hexo generates static files with a beautiful theme in seconds .</p></blockquote><h3 id="Build-Local-Static-Website-First"><a href="#Build-Local-Static-Website-First" class="headerlink" title="Build Local Static Website First"></a>Build Local Static Website First</h3><p>Here, we first need to build a local static website before we make it public and accessible to Internet. Type commands below in Command Line</p><pre class="language-none"><code class="language-none">npm install hexo-cli -ghexo init blogcd blognpm install hexo server</code></pre><p>With this, the server is host on our localhost with port 4000. Open <a class="link"   href="http://localhost:4000/" >http://localhost:4000/<i class="fas fa-external-link-alt"></i></a> to check it.</p><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p>To add a page or post, the layout could be page, post and title looks like <code>&quot;My new post&quot;</code>.</p><pre class="language-none"><code class="language-none">hexo new [layout] &lt;title&gt;</code></pre><h2 id="Deploy-Website-on-Github-Pages"><a href="#Deploy-Website-on-Github-Pages" class="headerlink" title="Deploy Website on Github Pages"></a>Deploy Website on Github Pages</h2><p>First, create a new repo with name <code>&lt;github-username&gt;.github.io</code>.</p><p>Then install the plugin `<strong>hexo-deployer-git</strong> by</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><p>and then change the configuration by opening <code>blog/_config.yml</code> and add following code:</p><pre class="language-none"><code class="language-none">deploy:    type: git    repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;github-username&gt;&#x2F;&lt;github-username&gt;.github.io.git    branch: &lt;branch you want to deploy&gt;</code></pre><p>After finishing steps above, run following commands to generate static files and deploy them to the github pages:</p><pre class="language-none"><code class="language-none">hexo generatehexo deploy</code></pre><h1 id="Congratulation"><a href="#Congratulation" class="headerlink" title="Congratulation"></a>Congratulation</h1><p>Now open <code>https://&lt;github-username&gt;.github.io</code> and you should see your own blog!</p><h2 id="Extented"><a href="#Extented" class="headerlink" title="Extented"></a>Extented</h2><h4 id="How-to-embed-a-PDF-in-the-page"><a href="#How-to-embed-a-PDF-in-the-page" class="headerlink" title="How to embed a PDF in the page"></a>How to embed a PDF in the page</h4><p>Adobe offers a <a class="link"   href="https://www.adobe.io/apis/documentcloud/dcsdk/pdf-embed.html" >embed API<i class="fas fa-external-link-alt"></i></a> to make your PDF embedded in a HTML page.</p><p>First, log in and create a credential to use, specify the domain as the link of your blog, for me <code>douliu95.github.io</code>.</p><p>Then check a demo, there are four kinds of embed mode to choose:</p><ul><li>full window</li><li>sized container</li><li>in-line</li><li>lightbox</li></ul><p>I use in-line mode since I want to embed my cv, which is only one page long. Then, click generate code and get a sample code:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"adobe-dc-view"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://documentcloud.adobe.com/view-sdk/main.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"adobe_dc_view_sdk.ready"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">var</span> adobeDCView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdobeDC<span class="token punctuation">.</span>View</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>clientId<span class="token operator">:</span> <span class="token string">"**********you id**********"</span><span class="token punctuation">,</span> divId<span class="token operator">:</span> <span class="token string">"adobe-dc-view"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>adobeDCView<span class="token punctuation">.</span><span class="token function">previewFile</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>content<span class="token operator">:</span><span class="token punctuation">&#123;</span>location<span class="token operator">:</span> <span class="token punctuation">&#123;</span>url<span class="token operator">:</span> <span class="token string">"https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>metaData<span class="token operator">:</span><span class="token punctuation">&#123;</span>fileName<span class="token operator">:</span> <span class="token string">"Summary.pdf"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>Then we copy this code to the markdown file of the page we want to embed with, and then we replace the <code>url</code> under <code>content</code> to my pdf link and change the <code>fileName</code>.</p><p>Now the pdf is embedded in the page.</p><h4 id="How-to-automatically-adjust-the-size-of-image-in-post"><a href="#How-to-automatically-adjust-the-size-of-image-in-post" class="headerlink" title="How to automatically adjust the size of image in post?"></a>How to automatically adjust the size of image in post?</h4><p>To make a image or picture look good both on PC browser or mobile device, it is necessary to make the size of image adjust automatically. </p><p>Using the template under when inserting a image:</p><pre class="language-none"><code class="language-none">&lt;div align&#x3D;&quot;center&quot;&gt;&lt;img src&#x3D;&quot;your image&#39;s url&quot; alt&#x3D;&quot;name&quot; style&#x3D;&quot;width: 100%;max-height: 100%&quot; &#x2F;&gt; &lt;&#x2F;div&gt;</code></pre><p>With this <code>style=&quot;width: 100%;max-height: 100%</code>, it should work now.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Why-Do-I-Need-the-Blog&quot;&gt;&lt;a href=&quot;#Why-Do-I-Need-the-Blog&quot; class=&quot;headerlink&quot; title=&quot;Why Do I Need the Blog&quot;&gt;&lt;/a&gt;Why Do I Need the Bl</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/20/hello-world/"/>
    <id>http://example.com/2021/10/20/hello-world/</id>
    <published>2021-10-20T12:43:30.778Z</published>
    <updated>2021-10-20T12:43:30.778Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
